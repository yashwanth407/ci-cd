pipeline {
    agent any

    environment {
        VENV = "venv"
        FLASK_PORT = "9001"
    }

    stages {
        stage('Clone GitHub Repo') {
            steps {
                git branch: 'main', credentialsId: 'github-https', url: 'https://github.com/yashwanth407/ci-cd.git'
            }
        }

        stage('Verify Files') {
            steps {
                sh 'ls -l'
            }
        }

        stage('Create app.py if missing') {
            steps {
                script {
                    def appExists = fileExists('app.py')
                    if (!appExists) {
                        echo "app.py not found â€” creating a minimal Flask app."
                        writeFile file: 'app.py', text: """\
from flask import Flask
import os

app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello, Jenkins!"

if __name__ == "__main__":
    port = int(os.environ.get("FLASK_PORT", 9001))
    app.run(host="0.0.0.0", port=port)
"""
                    } else {
                        echo "app.py found."
                    }
                }
            }
        }

        stage('Set Up Python Virtual Environment') {
            steps {
                sh '''
                    set -e
                    /usr/bin/python3 -m venv ${VENV}
                    ./${VENV}/bin/python -m pip install --upgrade pip
                    ./${VENV}/bin/pip install flask numpy pandas tensorflow
                '''
            }
        }

        stage('Run Flask App in Background') {
            steps {
                sh '''
                    set -e
                    nohup ./${VENV}/bin/python app.py > flask.log 2>&1 &
                    echo $! > flask.pid
                '''
            }
        }
    }

    post {
        always {
            echo "Cleaning up Flask process if still running..."
            sh '''
                if [ -f flask.pid ]; then
                    kill $(cat flask.pid) || true
                    rm flask.pid
                fi
            '''
        }
        success {
            echo "Archiving Flask log..."
            archiveArtifacts artifacts: 'flask.log', allowEmptyArchive: true
        }
    }
}
